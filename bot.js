const {Telegraf} = require('telegraf')
require('dotenv').config()
const http = require('http');
const { count } = require('console');
const bot = new Telegraf(process.env.BOT_TOKEN); 

// database(temporary until i make the real database mazafaka)
db = {
   
}

// chats
const ryyax = 547015874;
const s_mia_h = 681035579;
const chatpasta = -1001517072456;

// technical functions
function sleep(ms){
    return new Promise(resolve=>setTimeout(resolve,ms));
}
function reply(ctx,text){
    ctx.reply(text,{reply_to_message_id:ctx.message.message_id})
}

// functions
let onesixteen = function (){
    setInterval(()=>{
        let date = new Date();
        if(date.getUTCHours() === 22 && date.getUTCMinutes() === 16){
            bot.telegram.sendMessage(chatpasta,'1:16');
        }
    }, 60000)
}();
let morningAnnouncement = function(){
    setInterval(()=>{
        let date = new Date();
        if(date.getUTCHours() === 6 && date.getUTCMinutes() === 0){
            bot.telegram.sendMessage(chatpasta,morningMessage(date),{parse_mode:'HTML'}) 
            daily_weather_lviv(chatpasta)           
        }
    },60000)
}();
function getCoords(city_name, country_code){
    return new Promise((resolve)=>{
        http.get(`http://api.openweathermap.org/geo/1.0/direct?q=${city_name},${country_code}&limit=1&appid=${process.env.WEATHER_API_KEY}`, res=>{
            let data = '';
            res.on('data', chunk => data+=chunk);
            res.on('end',()=>{
                try{
                    data = JSON.parse(data);
                    resolve(data[0]);
                } catch(e){
                    bot.telegram.sendMessage(ryyax, `data coords error: ${e.message}`)
                }
            })
        }).on('error', e=>{
            bot.telegram.sendMessage(ryyax, `request coords error: ${e.message}`);
        });
    })
}
function getWeather(city_name, country_code){
    return new Promise((resolve)=>{
        getCoords(city_name, country_code).then(data => {
            let request = http.get(`http://api.openweathermap.org/data/2.5/onecall?lat=${data.lat}&lon=${data.lon}&appid=${process.env.WEATHER_API_KEY}&units=metric&lang=ua`,res=>{
                let weather_data = '';
                res.on('data', chunk => weather_data+=chunk);
                res.on('end',()=>{
                    try{
                        weather_data = JSON.parse(weather_data);
                        weather_data.city_names_in_different_names = data.local_names;
                        resolve(weather_data);
                    }catch(e){
                        bot.telegram.sendMessage(ryyax,`data weather error: ${e.message}`)
                    }
                })
            }).on('error',e=>{
                bot.telegram.sendMessage(ryyax, `request weather error: ${e.message}`)
            });    
        })     
    })
}
function getTodayWeather(city_name, country_code){
    return new Promise(resolve=>{
        getWeather(city_name,country_code).then(data=>{
            resolve({
                temperature: Math.round(data.current.temp),
                feels_like: Math.round(data.current.feels_like),
                temperature_max: Math.round(data.daily[0].temp.max),
                temperature_min: Math.round(data.daily[0].temp.min),
                weather_conditions_description: data.current.weather[0].description,
                weather_conditions_id: data.current.weather[0].id,
                city_name_language_ukrainian: data.city_names_in_different_names.uk,

            })
        })
    })
}

// messages
let morningMessage = date => {
return `<b>–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É, —Ç–æ–≤–∞—Ä–∏—Å—Ç–≤–æ!</b>
–°—å–æ–≥–æ–¥–Ω—ñ <b>${Math.floor((date.getTime()-new Date('February 24, 2022 03:40:00'))/1000/60/60/24)}-–π</b> –¥–µ–Ω—å, —è–∫ <span class="tg-spoiler">—Ö—É–π–ª–æ</span> –Ω–∞–ø–∞–ª–æ –Ω–∞ –Ω–∞—Å
–ê–ª–µ –º–∏ —Ç—Ä–∏–º–∞—î–º–æ—Å—å —ñ –±—É–¥–µ–º —Ç—Ä–∏–º–∞—Ç–∏—Å—å, <u>–±–æ –º–∏ —É–∫—Ä–∞—ó–Ω—Ü—ñ!</u>
<b><i>–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!</i></b>`
}
let daily_weather_lviv = (chat) => {
    getTodayWeather('Lviv','UKR').then(weather=>{
        let daily_weather_message = '1';
        let weather_conditions_icon
        let personal_message_patterns = {
            0: '–†–∞–Ω–∫–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:',
            1: '–ê –∑–∞—Ä–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏.',
            2: '–ü—Ä–æ–∫–∏–¥–∞–π—Å—è —ñ –±—É–¥—å –≤ –∫—É—Ä—Å—ñ –ø–æ–≥–æ–¥–∏',
            3: '–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π –¥–µ–Ω—å, –æ—Ç–æ–∂ –º–∞—é, —â–æ –≤–∞–º —Ä–æ–∑–∫–∞–∑–∞—Ç–∏:',
        };
        personal_message = personal_message_patterns[Math.floor(Math.random()*4)];
        if(weather.weather_conditions_id >= 800){
            switch(weather.weather_conditions_id){
                case 800:
                    weather_conditions_icon = '‚òÄÔ∏è';
                    break;
                case 801:
                    weather_conditions_icon = 'üå§';
                    break;
                case 802:
                    weather_conditions_icon = '‚õÖÔ∏è';
                    break;
                case 803:
                    weather_conditions_icon = 'üå•';
                    break;
                case 804:
                    weather_conditions_icon = '‚òÅÔ∏è';
                    break;
            } 
        } else{
            switch(weather.weather_conditions_id / 100){
                case 2:
                    weather_conditions_icon = '‚õà';
                    break;
                case 3:
                    weather_conditions_icon = 'üåß';
                    break;
                case 5:
                    weather_conditions_icon = 'üåß';
                    break;
                case 6:
                    weather_conditions_icon = '‚ùÑÔ∏è';
                    break;
                case 7:
                    weather_conditions_icon = 'üå´';
                    break;
                default:
                    weather_conditions_icon = '‚ùóÔ∏è'
            }
        }
        let date = new Date();
        let weather_date_today = date.getDate() + '.';
        if(date.getMonth()<10){
            weather_date_today += `0${date.getMonth()+1}`;
        } else{
            weather_date_today += date.getMonth()+1;
        }
        weather_date_today += '.' + date.getFullYear();

daily_weather_message = `üìç<b>${weather.city_name_language_ukrainian}!</b> ${personal_message}.
${weather_conditions_icon}–í –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞ –≤—É–ª–∏—Ü—ñ <i>${weather.temperature}¬∞</i>, <i>${weather.weather_conditions_description}</i>.
üå°–°—å–æ–≥–æ–¥–Ω—ñ, ${weather_date_today} –º–∞–∫—Å–∏–º—É–º <i>${weather.temperature_max}¬∞</i>, –º—ñ–Ω—ñ–º—É–º <i>${weather.temperature_min}¬∞</i>. 
üôå<i>–í—Å—ñ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è!</i>`,{parse_mode:'HTML'}
        bot.telegram.sendMessage(chat,daily_weather_message,{parse_mode:'HTML'});
    })
}

// bot hears
bot.hears('1000',ctx=>{
    let chat_id = ctx.message.chat.id;
    if(chat_id.toString().slice(0,1)==='-'){
        chat_id = '_' + chat_id.toString().slice(1,chat_id.length);
    }
    let database_identifier = 'counting_for_dead_insides' + chat_id;
    async function fn(){    
        for(let i=993;i>0;i=i-7){
            ctx.reply(i);
            await sleep(3000);
        }
        ctx.reply('DEAD INSIDE!!!!!!!')
        db[database_identifier] = 0;
    }
    if(db[database_identifier] != 1){
        fn();
        db[database_identifier] = 1;
    } else{
        reply(ctx,'—è –º–æ–∂—É —Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ 1 —Ä–∞–∑ –æ–¥–Ω–æ—á–∞—Å–Ω–æ(–∞–±–∏ –Ω–µ –±—É–ª–æ —Å–ø–∞–º—É, —Ç–∞–∫ —Ç–æ –º–æ–∂—É —ñ –±—ñ–ª—å—à–µ)')    
    }
})
bot.hears('1000-7', ctx=>reply(ctx,'–≤–∏–¥–Ω–æ —à–æ —Ç–∏ –¥–∞—É–Ω'));
bot.hears(/^—Å–æ–ª—è$/gi, ctx=>ctx.replyWithHTML(`<a href="tg://user?id=${s_mia_h}">–ù–∞–π–º–∏–ª—ñ—à–µ —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è—á–∫–æ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—ñ</a>`))
// bot.hears(/—Å–∞–º.*–¥–∞—É–Ω/gi, ctx=>{
//     if(ctx.message.chat.type === 'private'){
//         reply(ctx, '–±—É–ª–∞ –± —Ü–µ –≥—Ä—É–ø–∞ —è –± –ª—ñ–≤–Ω—É–≤');
//     } else {
//         ctx.leaveChat();
//     }
// });
bot.hears(/((–¥–æ–±—Ä).*(—Ä–∞–Ω–∫—É|—Ä–∞–Ω–æ–∫)|(–¥–µ–Ω—å|–¥–Ω—è)|(–≤–µ—á—ñ—Ä|–≤–µ—á–æ—Ä–∞)|(–Ω–æ—á—ñ))$/gi, ctx=>reply(ctx,'–º–∏ –∑ –£–∫—Ä–∞—ó–Ω–∏!'));
bot.hears(/–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ/gi, ctx=> reply(ctx,'–ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞!'))
bot.hears(/–°–ª–∞–≤–∞ –ù–∞—Ü—ñ—ó/gi, ctx=>reply(ctx,'–°–º–µ—Ä—Ç—å –≤–æ—Ä–æ–≥–∞–º!'))
bot.hears(/^–£–∫—Ä–∞—ó–Ω–∞!?$/gi,ctx=>reply(ctx,'–ü–æ–Ω–∞–¥ —É—Å–µ!'))
bot.hears(/^–ø—É—Ç—ñ–Ω$/gi,ctx=>reply(ctx,'—Ö—É–π–ª–æ!'))
bot.hears(/—Ä—É—Å–∫—ñ–π –≤–∞—î–Ω–Ω–∏–π –∫–∞—Ä–∞–±–ª—å/gi, ctx=>reply(ctx,'—ñ–¥—ñ –Ω–∞—Ö—É–π'))
bot.hears(/–´/gi, ctx=>reply(ctx,'–ö–∞–∂–∏ —Å–ª–æ–≤–æ –ø–∞–ª—è–Ω–∏—Ü—è!'))
bot.hears(/–ø—Ä–æ—Ü—å–∫–æ/gi, ctx=>{
    reply(ctx, ctx.message.text.replace(/–ø—Ä–æ—Ü—å–∫–æ/gi, '—Ö—É–π'))
})
bot.hears(/–ø–∞–ª—è–Ω–∏—Ü—è/gi, ctx=>ctx.replyWithVoice('AwACAgIAAxkBAAIDZ2JAer8F83BgHpcXSEY74oh73Va7AAJ4HAACjKPwSZOhMmPbVBVIIwQ'))

// bot on
// bot.on('sticker', ctx => reply(ctx, '–∑–∞—î–±–µ—à'))
bot.on('voice', ctx => reply(ctx,'–±–ª—è—Ç—å –≤ —Ç–µ–±–µ —à–æ –±—É–∫–≤–∏ –ø–ª–∞—Ç–Ω—ñ?'))

// bot commands
bot.command('/weather', ctx=>{
    daily_weather_lviv(ctx.message.chat.id)
})

// test
bot.hears('test',ctx=>{
    ctx.reply(ctx.message)
})


bot.launch();   

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))